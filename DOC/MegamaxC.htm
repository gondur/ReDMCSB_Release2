<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Megamax C</title>
<meta http-equiv="content-type" content="text/html;charset=utf-8" />
<link type="text/css" rel="stylesheet" media="all" href="style.css" />
</head>
<body>
<h1>Megamax C</h1>
<p>This document is based on Megamax C version 1.1.<br/>
Megamax C is composed of several command line tools (<code>*.TTP</code>). It also includes a shell and an editor that are not described here.</p>
<ul><li><a href="#MMCC">MMCC.TTP: C Compiler</a></li>
<li><a href="#MMIMP">MMIMP.TTP: Code Improver</a></li>
<li><a href="#MMDIS">MMDIS.TTP: Disassembler</a></li>
<li><a href="#MMLIB">MMLIB.TTP: Librarian</a></li>
<li><a href="#MMLINK">MMLINK.TTP: Linker</a></li>
<li><a href="#MAKE">MAKE file</a></li></ul>
<h2><a name="MMCC">MMCC.TTP: C Compiler</a></h2>
<h3>Overview</h3>
<p>The compiler takes a <code>.c</code> source code file as input and produces a <code>.o</code> object code file with the same name as output. Compilation error messages are written to a file named <code>ERRORS.OUT</code>. This file is deleted if no errors are found during compilation.</p>
<p>Command line: <code>mmcc.ttp MAIN.C</code></p>
<p>Command line parameters:</p>
<ul><li><code>-D</code>: Define a constant. Specifying <code>-DNAME=VALUE</code> on the command line is equivalent to <code>#define NAME VALUE</code> in source code.</li>
<li><code>-I</code>: Include path. Specifying <code>-IC:\INCLUDE</code> on the command line instructs the compiler to look for files specified with the <code>#include</code> directive in the specified folder.</li>
<li><code>-d</code>: No effect. This parameter sets a global variable to 1 (at address -$FA6(a4)), but this value has no effect.</li></ul>
<h3>Supported C language</h3>
<p>The Megamax C compiler implements the C language as described in the book "The C Programming Language" by Kernighan &amp; Ritchie 1<sup>st</sup> edition.</p>
<p>The following C keywords are supported (extracted from the <code>init!</code> segment in MMCC.TTP):</p>
<pre>auto    static  extern  register
typedef char    short   int     long    unsigned
float   double  struct  union
if      else    while   do      for
switch  case    default break   continue
return  goto    sizeof</pre>
<p>The <code>entry</code> keyword is also supported (reserved) but has no effect and was withdrawn in K&amp;R 2<sup>nd</sup> edition.</p>
<p>The <code>unsigned short</code> type is not supported.</p>
<p>The following keywords are not supported because they were introduced in K&amp;R 2<sup>nd</sup> edition: <code>const enum signed void volatile</code>.</p>
<ul><li><code>void</code>: All functions return a value. If not specified, the returned type is <code>int</code>. If no value is explicitly returned in the code then the returned value is undefined (it is the value in register D0 at the end of the function).</li>
<li><code>signed</code>: Integer types are implicitly signed when the <code>unsigned</code> keyword is not specified.</li></ul>
<p>The following preprocessor directives are supported: <code>#define #undef #include #ifdef #ifndef #endif #line</code></p>
<p>All comments must be enclosed in <code>/* */</code>. Comments starting with <code>//</code> are not supported.</p>
<p>Hexadecimal character constants like <code>0x81</code> are not supported. Only decimal like <code>129</code> and octal like <code>\201</code> are supported.</p>
<p>The compiler does not check the number nor the types of parameters when compiling function calls: it is possible to call any function with any number of parameters of any type.</p>
<p>Identifiers (names of variables, functions, parameters, #define) can be arbitrarily long but the compiler only uses the first 10 characters. Warning: from the compiler point of view, <code>COMPILERVARIABLE1</code> and <code>COMPILERVARIABLE2</code> both refer to the same identifier <code>COMPILERVA</code>.</p>
<h3>Extensions to the language</h3>
<p>Megamax C implements some extensions that are not part of the original C language:</p>
<h4>Inline assembly</h4>
<p>Use <code>asm {}</code> in the source code to include a block of inline 68000 assembly code inside the curly brakets.<br/>
Register names must be uppercase.<br/>
Parameter names, global and local variable names can be used directly with or without the <code>(A4)</code> suffix (for global variables) or the <code>(A6)</code> suffix (for parameters and local variables)<br/>
If a label inside an <code>asm {}</code> block must be available from C code outside the block as a pointer (to code or to data), the same label must be declared as an <code>extern</code> function. Example:</p>
<pre>asm {
EntryPoint: rts
}
extern EntryPoint();</pre>
<h4>Overlays</h4>
<p>Megamax C generates position independant code which means it does not use absolute addresses for branch and jump instructions. It uses only relative offsets for branch and jump instructions which are limited to +/- 32768 bytes. Consequently, it cannot compile code segments larger than 32KB maximum.<br/>
In order to build larger programs, use <code>overlay "&lt;ovname&gt;"</code> in the C source code to tell the compiler in which segment to store the code following that statement.<br/>
A call to a function located inside the same segment as the caller function use instructions with offsets relative to the <code>PC</code> register (program counter).<br/>
A call to a function located inside another segment use instructions with offsets relative to the <code>A5</code> register which always contain the address of a jumptable. The linker generates this jumptable at the beginning of the <code>.PRG</code> file and it is the only place where absolute addresses are used. Because of these absolute addresses, the linker also generates a relocation table in the <code>.PRG</code> file to update the jumptable based on the effective address where the program is loaded in memory.</p>
<h4>Structures</h4>
<p>Megamax C allows the use of structures as function parameters, as return values and for assignment. The compiler adds calls to functions supplied in the Megamax C System Library (SYSLIB file) to manage these features: <code>_blockcmp</code> (to compare two structures) and <code>_blockmv</code> (to copy a structure).</p>
<h4>pascal keyword</h4>
<p>This keyword was probably meant to support the pascal calling convention where the callee cleans parameters from the stack instead of the caller as in the C calling convention. However implementation of this keyword seems buggy.<br/>
Syntax: <code>pascal int foobar(a, b)</code></p>
<h3>Inner workings</h3>
<p>The compiler uses the 68000 registers in the following way:</p>
<ul><li>Register A7 is only used to store the address of the top of the stack.</li>
<li>Register A6 is only used to store the address of the stack frame. Inside a function, all accesses to function parameters and non <code>register</code> local variables are performed using A6 (positive offsets for parameters, negative offsets for local variables).</li>
<li>Register A5 is only used to store the address of the jump table.</li>
<li>Register A4 is only used to store the address of the DATA segment (positive offsets to A4) and BSS segment (negative offsets to A4).</li>
<li>Registers A3 and A2 are only used for the first two function parameters or local variables that are pointers and are declared with the <code>register</code> keyword. The <code>register</code> keyword is ignored for subsequent pointer parameters or local variables.</li>
<li>Registers D7, D6, D5 and D4 are only used for the first four function parameters or local variables that are not pointers and are declared with the <code>register</code> keyword. The <code>register</code> keyword is ignored for subsequent non pointer parameters or local variables.</li>
<li>When registers among A3, A2, D7, D6, D5 and D4 are actually used in a function, their previous values are preserved (backed up to the stack at the beginning of the function and restored from the stack at the end).</li>
<li>Registers A0, A1, D0, D1, D2, D3 are used for processing and their values are not preserved during the execution of a function Exception: when a <code>register</code> variable is the destination of the result of an expression, the corresponding register is used directly instead of D0 or D1.</li>
<li>Register D0 is used to store the return value of all functions.</li></ul>
<p>Sometimes while evaluating an expression, the compiler needs to temporarily store a value in memory because it considers all registers as exhausted. In such cases, it creates a 10 bytes large local variable to store the value (no matter the actual size of the value to store).</p>
<p>The compiler only stores text strings in the DATA segment. Each string is aligned on word boundaries. All strings are terminated by a 00h byte. An additional 00h byte is added for padding to ensure alignment.</p>
<p>Some helper functions supplied in the Megamax C System Library (SYSLIB) are automatically called by the compiler when using some features in the source code. For example, if you multiply two long variables, the compiler will call <code>_lmul</code> to perform the actual operation. Here is a list of these helper functions (extracted from MMCC.TTP):</p>
<ul><li><code>_incfloat</code></li>
<li><code>_incdouble</code></li>
<li><code>_decfloat</code></li>
<li><code>_decdouble</code></li>
<li><code>_0from_float</code></li>
<li><code>_0to_float</code></li>
<li><code>_0to_long</code></li>
<li><code>_0from_long</code></li>
<li><code>_fpreg0</code></li>
<li><code>_ffunc</code></li>
<li><code>_ulmul</code>: Multiply unsigned long integers</li>
<li><code>_lmul</code>: Multiply signed long integers</li>
<li><code>_ldiv</code>: Divide long integers</li>
<li><code>_blockcmp</code>: Compare two structures</li>
<li><code>_blockmv</code>: Copy a structure (used when passing a structure as a parameter)</li></ul>
<h3>Known bugs (in version 1.1):</h3>
<ul><li>Assembly instructions <code>dc.l</code> are not processed correctly in some situations and produce wrong machine code. Workaround: use <code>dc.w</code> instructions.</li>
<li>The compiler generates wrong offsets to access data in a bit field if multiple bit fields are defined in a single <code>struct</code>. Workaround: use only a single bit field per <code>struct</code></li>
<li>Compilation errors occur if there are no statements after a label. Workaround: use <code>{}</code> or <code>;</code> after the label.</li>
<li>When the compiler automatically generates a 10 bytes large local variable to temporarily store a byte sized variable while evaluating an expression, the generated machine code is wrong: read and write accesses to the data are not performed on the same byte! This issue does not occur with word or long sized variables.</li></ul>
<h2><a name="MMIMP">MMIMP.TTP: Code Improver</a></h2>
<p>The code improver takes a <code>.o</code> file (object code) as input and improves the code in this file (the output overwrites the input file).<br/>
There is only one improvement: the program looks for .w (word sized) branch instructions and replaces them with .s (byte sized) variants wherever possible. It repeatedly makes passes through the <code>.o</code> file until two successive passes produce identical results.<br/>
Command line: <code>mmimp.ttp MAIN.O</code></p>
<h2><a name="MMDIS">MMDIS.TTP: Disassembler</a></h2>
<p>The disassembler takes a <code>.o</code> file (object code) as input and produces a <code>.s</code> file (assembly source code) as output.<br/>
Command line: <code>mmdis.ttp MAIN.O -o MAIN.S</code></p>
<h2><a name="MMLIB">MMLIB.TTP: Librarian</a></h2>
<p>Several <code>.o</code> files (object code) can be grouped in a single <code>.L</code> file (library file format).<br/>
Megamax C comes with several library files. SYSLIB (system library containing implementations of some C standard library functions as well as other helper code) is also a library file although it does not have the <code>.L</code> extension.<br/>
This tool can create and open library files in order to add/remove <code>.o</code> files to/from a library file.<br/>
The easiest way to use this tool is to use the GUI shell.<br/>
Command line parameters:</p>
<ul><li><code>d</code>: Delete <code>.o</code> from library.</li>
<li><code>r</code>: Register <code>.o</code> in library.</li>
<li><code>x</code>: Extract <code>.o</code> from library</li>
<li><code>t</code>: Table of contents</li>
<li><code>v</code>: Verbose. Displays more information on screen. Can be associated with any other of the parameters.</li></ul>
<p>As an example, here are the command lines to remove <code>init.o</code> from SYSLIB and then add a custom version in the SYSLIB:</p>
<ul><li><code>mmlib.ttp dv SYSLIB init.o</code>: Delete <code>init.o</code> from the SYSLIB library file.</li>
<li><code>mmlib.ttp rv SYSLIB init.o</code>: Register <code>init.o</code> into the SYSLIB library file.</li>
<li><code>mmlib.ttp xv SYSLIB init.o</code>: eXtract <code>init.o</code> from the SYSLIB library file. <code>init.o</code> remains in SYSLIB.</li>
<li><code>mmlib.ttp tv SYSLIB</code>: Table of contents. List <code>.o</code> files stored in the SYSLIB library file.</li></ul>
<h2><a name="MMLINK">MMLINK.TTP: Linker</a></h2>
<h3>Overview</h3>
<p>The linker takes a series of <code>.o</code> files (object code) as input and produces a <code>.PRG</code> file (standard Atari ST executable file) as output.</p>
<p>Command line: <code>mmlink.ttp -o PROJECT.PRG MAIN.O MODULE1.O MODULE2.O -M PROJECT.MAP</code></p>
<p>Command line parameters</p>
<ul><li><code>-o</code>: specify the name of the output executable file. If not used the default name <code>A.PRG</code> is used.</li>
<li><code>-M</code>: specify the name of the output map file. If not used, the default name <code>A.MAP</code> is used.</li></ul>
<p>You can list object files (<code>.o</code>, up to 100 files) or library files (<code>.L</code>, up to 20 files). If there are too many file names to fit on the command line, you can list the file names on a single line inside a <code>.LNK</code> file.<br/>
There can be up to 60 segments in a single executable.</p>
<h3>Inner workings</h3>
<p>When building a <code>PRG</code> file, the linker automatically and silently links the <code>init.o</code> module stored in SYSLIB to the resulting executable. This is the C loader which is the very first code executed by any program produced by the linker. The file <code>init.c</code> supplied with Megamax C contains the source code of this loader.<br/>
The linker will also automatically link other helper functions from the SYSLIB file after linking all the <code>.o</code> files supplied on the command line.</p>
<p>When the Megamax linker builds the PRG file, it looks for the following global symbols:</p>
<ol><li><strong><code>_main</code></strong>: very first code run by the PRG.<br/>
This code is found in object file <code>init.o</code>, which is included in the SYSLIB. <code>init.c</code> contains the source code, mainly assembly code.</li>
<li><strong><code>_init</code></strong>: code called by _main whose purpose is to initialize BSS segment (global variables and static variables).<br/>
The code for this routine is automatically generated by the compiler (in a dedicated segment named <code>init!</code>).<br/>
The very minimum code output by the linker for this consists of an <code>RTS</code> instruction.</li>
<li><strong><code>_initargcv</code></strong>: code called by <code>_main</code> whose purpose is to initialize the standard argc and argv parameters of the <code>main</code> function.<br/>
The very minimum code output by the linker for this consists of an <code>RTS</code> instruction.</li>
<li><strong><code>main</code></strong>: in the program source code.</li></ol>
<p>Notes:</p>
<ul><li>The linker output on screen indicates the segment names, their numbers and sizes. The <code>.MAP</code> file contains the global symbols in the form: <code>MAIN=1:238</code> which means function <code>MAIN</code> is located at offset 238 in segment #1.</li>
<li>Note that the symbol names in the MAP file are converted to upper case (but the linker uses the symbols as they are in the source files, including for computing hashes of the symbol names in order to manage them).</li>
<li>In the error message when a label is not found, <code>0foobar</code> means label <code>foobar</code> in segment #0.</li></ul>
<p>The linker reads <code>.o</code> files as input and dispatches their content into segments. Each segment has a name and an index.<br/>
The DATA segment of the PRG file consists of a single segment named <code>s!</code> (hardcoded by the compiler) and with segment index #0 (hardcoded by the linker). The compiler only puts strings into this segment (global variables, static local variables, strings passed as parameters in function calls).<br/>
The BSS segment of the PRG file consists of a single segment named <code>bss</code> (hardcoded by the compiler) and has no index (this is an exception because there is no actual data stored in the PRG file for the BSS segment, only its total size). The compiler puts all global variables and static variables into this segment (except strings).<br/>
The maximum size of the DATA and BSS segments is 32KB each.<br/>
The TEXT segment of the PRG file consists of multiple segments. Segments are stored in the PRG file in the order of increasing segment numbers.<br/>
The linker always loads the file init.o from SYSLIB first. This file creates two segments named <code>main</code> (segment index #1) and <code>init!</code> (segment index #2).<br/>
Then the linker loads each <code>.o</code> file supplied on the command line sequentially from the first to the last.<br/>
When a segment name (overlay) is encountered for the first time, a new segment with that name is created and is assigned the next available segment index (starting at #3).<br/>
Content is then added to the segment specified in the <code>.o</code> file. A single <code>.o</code> file can contain data for the <code>s!</code> segment, data for the <code>bss</code> segment, and code for multiple segments (declared using the <code>overlay</code> keyword).</p>
<p>Jump table generation: The jumptable contains a group of <code>jmp</code> instructions for each code segment. Each group contains jumps to the functions in that segment that are referenced in other segments (all <code>jmp</code> to functions in the first declared code segment, then all jmp to functions in the second declared code segment, etc.). The order of functions in a group is determined by the hash of the function name (a symbol) as performed by the linker to speed up access to symbols. The hash is the 8 bit sum of each character in the symbol (up to 10 characters per symbol, subsequent characters are accepted but ignored).</p>
<h3>Known bug (in version 1.1)</h3>
<ul><li>Crash if source code contains <code>goto MYLABEL;</code> and <code>MYLABEL</code> does not exist.</li></ul>
<h2><a name="MAKE">MAKE file</a></h2>
<p>The shell allows using a simple MAKE file to build a project. The MAKE file should contain:</p>
<ul><li>First line: list of <code>.c</code> files to compile</li>
<li>Second line: command line for the linker</li></ul>
<p>Example:<br/>
<code>MAIN.C MODULE1.C MODULE2.C<br/>
MMLINK.TTP -o PROJECT.PRG MAIN.O MODULE1.O MODULE2.O -M PROJECT.MAP</code></p>
</body>
</html>