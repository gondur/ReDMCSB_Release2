<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>ReDMCSB Readme</title>
<meta http-equiv="content-type" content="text/html;charset=utf-8" />
<link type="text/css" rel="stylesheet" media="all" href="style.css" />
</head>
<body>
<h1>ReDMCSB Readme</h1>
<h2>What is ReDMCSB?</h2>
<p>ReDMCSB means 'Reverse engineered Dungeon Master and Chaos Strikes Back'. Currently, it contains the source code of the Atari ST versions of the game. This is not the original source code as written by the FTL developers but the result of reverse engineering directly from the executable files on the original floppy disks. However this source code is extremely accurate because after compilation it produces exactly the same machine code as in the original games with only minor differences explained in <a href="#Accuracy">Accuracy</a>.</p>
<h2>Package contents</h2>
<p>This package contains the following files and folders:</p>
<dl><dt>DOC</dt><dd>Documentation. This readme and also:
<ul><li><a href="BugsAndChanges.htm">Bugs And Changes</a>: List of known bugs and changes between versions.</li>
<li><a href="CopyProtection.htm">Copy Protection</a>: Detailed description of the copy protection.</li>
<li><a href="Engine.htm">Engine</a>: Explanations of some aspects of the game engine.</li>
<li><a href="MegamaxC.htm">Megamax C</a>: Information about Megamax C version 1.1 gathered during the reverse engineering.</li></ul></dd>
<dt>SOURCE\MAKE</dt><dd>Batch files to compile and build executables (<code>*.BAT</code>), Ordered lists of object files for the linker (<code>*.LNK</code>), a helper C program to extract the binary machine code of a routine written in assembly (used for the boot sector, <code>SWOOSH.IMG</code> and the copy protection code hidden as graphics)</dd>
<dt>SOURCE\BOOTSECT</dt><dd>Source code (<code>*.C</code>) of the floppy disk boot sector (identical in all game versions) that loads and runs <code>SWOOSH.IMG</code></dd>
<dt>SOURCE\SWOOSH.IMG</dt><dd>Source code (<code>*.C</code>) of the <code>SWOOSH.IMG</code> program (identical in all game versions) that displays the FTL logo and then runs <code>START.PRG</code></dd>
<dt>SOURCE\START.PRG</dt><dd>Source code (<code>*.C</code>) of the <code>START.PRG</code> program (identical in all game versions) that decompresses and runs the game engine stored in <code>START.PAK</code></dd>
<dt>SOURCE\ENGINE</dt><dd>Source code (<code>*.C</code>, <code>*.H</code>) of the game engine for the following versions:
<ul><li>Dungeon Master for Atari ST 1.0a English (no version visible in dialog boxes)</li>
<li>Dungeon Master for Atari ST 1.0b English (version '1.0' visible in dialog boxes)</li>
<li>Dungeon Master for Atari ST 1.1 English</li>
<li>Dungeon Master for Atari ST 1.2 English</li>
<li>Dungeon Master for Atari ST 1.2 German</li>
<li>Dungeon Master for Atari ST 1.3a French (version 1.3 visible in dialog boxes)</li>
<li>Dungeon Master for Atari ST 1.3b French (variant, version 1.3 also visible in dialog boxes)</li>
<li>Chaos Strikes Back for Atari ST 2.0 English</li>
<li>Chaos Strikes Back for Atari ST 2.1 English</li></ul>
The source code includes:
<ul><li>Mostly C language with some parts written in Motorola 68000 assembly language. All the parts in assembly language were written as-is by the original developers, mostly for performance reasons (like the low level graphic and sound routines). The Megamax C compiler cannot generate these parts from C language but it supports inline assembly code in the source code.</li>
<li>Meaningful and consistent names for all functions and their parameters, global and local variables, constants and macros.</li>
<li>Comments.</li>
<li>Conditional compilation directives allowing compilation of each version from the same source code. They also provide easy identification of the differences between versions.</li>
<li>Conditional compilation directives allowing compilation without the copy protection. They also provide easy identification of all code related to the copy protection.</li></ul></dd>
<dt>OBJECT</dt><dd>Compiled object files (<code>*.O</code>), Disassembled object files (<code>*.S</code>) for each version of the game engine and for <code>START.PRG</code>. The versions including the copy protection are in a folder named FULL and the versions without the copy protection are in a folder named NOCP</dd>
<dt>BUILD</dt><dd>Executable files (<code>*.PRG</code>), Executable maps procuded by the linker (<code>*.MAP</code>), Binary files for the floppy disk boot sector, <code>SWOOSH.IMG</code> and the copy protection code hidden as graphics. The versions including the copy protection are in a folder named FULL and the versions without the copy protection are in a folder named NOCP</dd>
<dt>ORIGINAL</dt><dd>Original compressed executable files (<code>START.PAK</code>), decompression script and decompressed original executable files, other original files containing executable code</dd>
<dt>PCOMMAND.PRG</dt><dd>PCommand - Command Line Interface used to run batch files to compile and build the executable files</dd>
<dt>PCOMMAND.DOC</dt><dd>PCommand - Documentation</dd>
<dt>AUTOEXEC.BAT</dt><dd>PCommand - Batch file executed automatically when Pcommand starts</dd>
<dt>MEGAMAX</dt><dd>Megamax C - Data (Libraries, Headers, etc.)</dd>
<dt>EDITOR.PRG</dt><dd>Megamax C - Text editor</dd>
<dt>MMCC.TTP</dt><dd>Megamax C - Compiler</dd>
<dt>MMDIS.TTP</dt><dd>Megamax C - Disassembler</dd>
<dt>MMIMP.TTP</dt><dd>Megamax C - Code Improver</dd>
<dt>MMLIB.TTP</dt><dd>Megamax C - Librarian</dd>
<dt>MMLINK.TTP</dt><dd>Megamax C - Linker</dd>
<dt>SHELL.PRG</dt><dd>Megamax C - Shell</dd>
<dt>SHELL.SET</dt><dd>Megamax C - Shell configuration file</dd></dl>
<p>This package does not include:</p>
<ul><li>Source code of the programs on the Chaos Strikes Back Utility Disk</li>
<li>The full distribution of Megamax C compiler version 1.1: only the necessary files are included</li></ul>
<h2>Compilation</h2>
<p>This archive already contains all the compiled object files and linked executables. However, this section contains the necessary instructions if you want to compile the game yourself.</p>
<p>Unless you want to do it on real hardware, you can use the <a href="http://hatari.tuxfamily.org/">Hatari</a> emulator:</p>
<ol><li>Start with the default configuration of Hatari corresponding to an Atari ST with an 8MHz 68000 CPU, 1MB or RAM, the EmuTOS ROM (included with Hatari in tos.img, but you can also use a TOS 1.04 US ROM).</li>
<li>Press F12 to open the configuration </li>
<li>Click 'Hard Disks', then click 'Browse' at the right of 'GEMDOS drive'. Select the folder where you have uncompressed the archive.</li>
<li>Click 'Atari screen', then select 'Mono'. This has a higher screen resolution which is better to display text. (Optional)</li>
<li>Check the 'Reset Machine' radio button then click OK.</li>
<li>Once the desktop is loaded, open disk C:.</li>
<li>Double-click on <code>PCOMMAND.PRG</code> to start it. It will automatically run the commands in <code>AUTOEXEC.BAT</code>, which will then prompt you to build all the executable files.</li>
<li>Press AltGr-X to speed up emulation in Hatari and minimize the compilation time.</li></ol>
<p>You can also use the <a href="http://ataristeven.t15.org/Steem.htm">Steem SSE</a> emulator, but make sure you use version 3.6.4 minimum, with TOS 1.04 and with the <em>Hacks</em> enabled in the <em>SSE</em> section of the Options. The Megamax C compiler randomly crashes in older versions of Steem (it is not possible to compile all the source code files without a crash). Many thanks to Steven for fixing this.</p>
<h2><a name="Accuracy">Accuracy</a></h2>
<p>The ORIGINAL folder contains the compressed <code>START.PAK</code> files from the original floppy disks. When the game starts, <code>START.PRG</code> decompresses and then runs the engine executable file. You can use the <code>DecompressPAK.vbs</code> script in the ORIGINAL folder to decompress <code>START.PAK</code> files.</p>
<p>The executable files built from this source code with Megamax C version 1.1 (available in the BUILD\ENGINE folder) are not identical to the executable files built by FTL (available in the ORIGINAL folder), but they are as close as possible. This section explains the differences between the two versions. Because of these differences, the executables in the BUILD\ENGINE\FULL folder will fail some copy protection checks because of incorrect checksum values.</p>
<p>The differences are not caused by the source code being 'wrong' but rather because FTL used another version of the Megamax C compiler and linker (probably version 1.2) that includes further optimizations. This version is not available anywhere on the Internet, I could only find and use version 1.1. If you disassemble and compare the executable files (between BUILD and ORIGINAL folders) you will find many differences but in fact all of them are caused by 4 compiler optimizations not included in Megamax 1.1 and one difference in linker behavior.</p>
<p>Here are technical details about the differences in compiler behavior:</p>
<ul><li>When casting an <code>unsigned char</code> into an <code>unsigned int</code>, version 1.1 generates <code>move.b</code> and <code>and.w #255</code> instead of <code>clr.w</code> and <code>move.b</code> in the original.</li>
<li>Inside a <code>switch</code> statement, if the last statement right before a <code>case</code> or right at the end of a <code>default</code> (but not before a <code>default</code>, and not at the end of the last <code>case</code> in the switch) is a <code>break</code>, a <code>return</code>, a <code>continue</code> or a <code>goto</code>, it will generate a <code>bra</code> instruction. Version 1.1 adds a second <code>bra</code> instruction to branch to the statement following the next <code>case</code> instead of omitting the second <code>bra</code> in the original. This optimization avoids inserting <code>bra</code> instructions that would never be executed.</li>
<li>When pushing two consecutive non zero, word sized immediate values as parameters of a function call version 1.1 generates two <code>move.w</code> instead of a single combined <code>move.l</code> in the original. This optimization is also performed while initializing a global variable with two consecutive <code>int</code>.</li>
<li>When comparing a value with 0 using one operator among <code>&gt; &lt; &gt;= &lt;=</code> version 1.1 generates <code>cmpi</code> or <code>cmp</code> instead of <code>tst</code> in the original.</li></ul>
<p>With the version 1.1 linker, eleven entries are missing from the jump table compared to the original games. Their inclusion in the jump table looks like a bug because because none of these entries are used in the program. Some point to data (and not executable code) and none of them are referenced in another segment than the one they are declared in so there is no reason for the linker to include them in the jumptable in the first place. Here are the symbols for these entries:</p>
<ul><li>V061_1_HHH_i_RemainingSoundSampleCount</li>
<li>E061_aAA6_SOUND_Exception77Handler_TimerA_SoundPlayer</li>
<li>V061_4_GFF_l_CurrentChannelsAmplitudeTable</li>
<li>F063_aA05_SOUND_KeyClickOff</li>
<li>V061_2_A79_i_SoundSampleRepeatCount</li>
<li>S076_aaal_MOUSE_OnMouseButtonsStatusChange</li>
<li>S075_aaak_MOUSE_Exception70Handler_IKBD_MIDI_MouseStatus</li>
<li>V061_6_dzz_al_ChannelsAmplitudeTableSoft</li>
<li>V061_3_aav_l_NextSoundSample</li>
<li>R138_lzzz_COPYPROTECTIONEF_HiddenCodeLauncher</li>
<li>F497_pzzz_LZW_Decompress</li></ul>
<h2>Terminology</h2>
<p>The terminology I have used in the source code is inspired from the following sources:</p>
<ul><li>The executable file of Dungeon Master for FM-Towns 2.0 English which is the only version that was compiled with symbols included (visible at the end of the file EDM.EXP).</li>
<li>The executable file of Dungeon Master for Apple IIGS 2.0 English where the name of segments is visible.</li>
<li>Documents such as the game manuals, hint books and some press articles.</li></ul>
<p>There are many differences with the usual terminology in common usage since CSBwin, here are some examples:</p>
<table>
<tr><th>CSBwin</th><th>ReDMCSB</th></tr>
<tr><td>Monster</td><td>Creature</td></tr>
<tr><td>Monster group</td><td>Group</td></tr>
<tr><td>Actuator</td><td>Sensor</td></tr>
<tr><td>Missile</td><td>Projectile</td></tr>
<tr><td>Cloud</td><td>Explosion</td></tr>
<tr><td>Timer</td><td>Event</td></tr>
<tr><td>Timer queue</td><td>Timeline</td></tr>
<tr><td>Cell</td><td>Square</td></tr>
<tr><td>Button</td><td>Mouse input</td></tr>
<tr><td>Mouse event</td><td>Command</td></tr>
<tr><td>Decoration</td><td>Ornament</td></tr>
<tr><td>ITEM16</td><td>Active Group</td></tr>
<tr><td>CHARDESC</td><td>Champion</td></tr>
<tr><td>RN</td><td>Thing</td></tr>
<tr><td>Footprint</td><td>Scent</td></tr>
</table>
<h2>Naming conventions</h2>
<p>The Megamax C compiler allows arbitrarily long identifiers (for the name of variables, functions, parameters, #define) but only uses the first 10 characters. This means that the first 10 characters of each identifier must be unique. In order to avoid any risk of having two identical identifiers (from the compiler point of view), most identifiers are numbered. They start with a letter prefix because identifiers cannot start with a number. The letter prefix defines the type of identifier:</p>
<ul><li><code>G</code>: Global variables</li>
<li><code>L</code>: Local variables</li>
<li><code>A</code>: Alias for a local variable (used when a single variable is used for multiple purposes)</li>
<li><code>P</code>: Function parameters</li>
<li><code>AP</code>: Alias for a function parameter (used when a single parameter is used for multiple purposes)</li>
<li><code>F</code>: Regular C functions</li>
<li><code>E</code>: Exceptions declared in <code>asm{}</code> blocks (return with <code>rte</code> instruction)</li>
<li><code>R</code>: Routines declared in <code>asm{}</code> blocks (return with <code>jmp</code> instruction)</li>
<li><code>S</code>: Subroutines declared in <code>asm{}</code> blocks (return with <code>rts</code> instruction)</li>
<li><code>V</code>: Variables declared in <code>asm{}</code> blocks</li>
<li><code>C</code>: Constant values declared with <code>#define</code></li>
<li><code>M</code>: Macros declared with <code>#define</code></li>
<li><code>MASK</code>: Constant values used as masks for binary operations declared with <code>#define</code></li></ul>
<p>Note: some constants declared with <code>#define</code> and all struct and union members are not numbered and still use unique names.</p>
<p>Identifiers for global variables, local variables and parameters contain a short string identifying their type:</p>
<ul><li><code>i</code>: int</li>
<li><code>ui</code>: unsigned int</li>
<li><code>c</code>: char</li>
<li><code>uc</code>: unsigned char</li>
<li><code>l</code>: long</li>
<li><code>ul</code>: unsigned long</li>
<li><code>s</code>: struct</li>
<li><code>a&lt;x&gt;</code>: array of elements of type x (x can be any type, including another a for multi-dimension arrays)</li>
<li><code>p&lt;x&gt;</code>: pointer to x (x can be any type)</li>
<li><code>f&lt;x&gt;</code>: function returning type x (x can be any type)</li></ul>
<p>These custom types defined with <code>typedef</code> also have an abbreviation because they are used very frequently:</p>
<ul><li><code>V</code>: VOID</li>
<li><code>B</code>: BOOLEAN</li>
<li><code>T</code>: THING</li></ul>
<p>Examples:</p>
<ul><li><code>pui</code>: pointer to unsigned int</li>
<li><code>aul</code>: array of unsigned long</li>
<li><code>aaui</code>: array of array of unsigned int</li>
<li><code>pT</code>: pointer to a THING</li>
<li><code>pfV</code>: pointer to a function returning VOID</li>
<li><code>s</code>: struct</li></ul>
<p>For global variables whose value is defined in one of graphics #558 to #562 in <code>GRAPHICS.DAT</code>, a prefix <code>Graphic558</code> to <code>Graphic562</code> is added to the variable identifier.</p>
<p>Function names contain an additional prefix consisting of 4 seemingly random letters or digits. These characters are used to make sure that the functions appear in the correct order in the jump table at the beginning of the executable file. The linker defines the order of functions based on hashes of their names (the first 10 characters). These characters were carefully selected for each function so that the hashes are ordered in the same order as in the original FTL source code.</p>
<p>Examples of identifiers:</p>
<ul><li><code>G242_ai_Graphic559_FoodAmounts</code>: Global variable of type 'array of int' that is part of graphic #559</li>
<li><code>G269_ps_CurrentMap</code>: Global variable of type 'pointer to struct'</li>
<li><code>F139_aqzz_DUNGEON_IsCreatureAllowedOnMap</code>: Function. 'aqzz' does not mean anything but is required so that the function is ordered correctly in the jump table in the final executable file.</li>
<li><code>P234_T_Thing</code>: Function parameter of type 'THING'</li>
<li><code>L0236_puc_Multiple</code>: Local variable of type 'pointer to unsigned char'. Multiple means the variable is used for several purposes (One alias is defined for each).</li>
<li><code>A0236_puc_Group</code>: Alias to local variable L0236_ of type 'pointer to unsigned char'.</li>
<li><code>C05_THING_TYPE_WEAPON</code>: Constant of value '5'</li>
<li><code>M12_TYPE</code>: Macro #12 (the number has no meaning)</li>
<li><code>MASK0x0004_TELEPORTER_VISIBLE</code>: Binary mask of hexadecimal value 0x0004</li></ul>
<h2>Size optimizations</h2>
<p>FTL designed Dungeon Master to run on the first Atari 520ST computers. The requirements were:</p>
<ul><li>The game must fit on a single sided floppy disk because the floppy disk drives in the first Atari 520ST computers were only single sided and FTL did not want to include multiple floppy disks to minimize production costs.</li>
<li>The game must run in the 512 KB of RAM available in the Atari 520ST.</li></ul>
<p>As shown below, FTL went to great lengths to save disk space and minimize memory footprint. In Dungeon Master, there is no free space available on the original floppy disk which means that all of these optimizations were necessary to put as much content as possible in the game. In Chaos Strikes Back, there is free space available on the floppy disk because the dungeon file (the Prison) is much smaller (the actual dungeon is on the Utility Disk).</p>
<h3>Non standard floppy disk format</h3>
<p>The standard floppy disk format for Atari ST use 9 sectors per track, providing 360KB of storage on a single side (80 tracks per side, 512 bytes per sector).<br/>
FTL used a non standard format with 10 sectors per track to increase the capacity to 400KB. This custom format can be read without issues. Writing to such disks is less reliable (because the gaps between sectors are smaller) but this is not an issue as it is not needed to write anything on the game disk.</p>
<h3>Custom initialization routine</h3>
<p>When the Megamax C linker builds an executable file, it automatically links <code>init.o</code> (stored in SYSLIB) which contains the very first routine executed when the program runs. The source code of this module is supplied with Megamax C in the file <code>init.c</code>. FTL customized this code and replaced the original <code>init.o</code> module in SYSLIB. Here is what was changed from the original:</p>
<ul><li>The stack size is set to 2000 bytes instead of 8192 bytes to save some memory.</li>
<li>The instruction <code>and.l #-2,D0</code> used to ensure an even byte boundary for the stack address is replaced by <code>andi.w #-2,D0</code>.</li>
<li>Variables <code>_argc</code> and <code>_argv</code> are removed as well as the call to <code>_initargcv()</code> to initialize them from the command line (the game does not access the command line with the standard C parameters for <code>main()</code>). Without this call, the linker does not link <code>_initargcv.o</code> anymore to the executable.</li>
<li>The call to <code>exit()</code> when <code>main()</code> returns is removed (the game never returns, you must restart the computer). Without this call, the linker does not link <code>exit.o</code> anymore to the executable as well as these other dependant modules: <code>close.o</code>, <code>exit.o</code>, <code>fclose.o</code>, <code>fillbuf.o</code>, <code>lseek.o</code>, <code>misc.o</code>, <code>open.o</code>, <code>osbind.o</code> and <code>write.o</code>.</li></ul>
<p>These changes save disk space (smaller <code>.PRG</code> file with fewer linked modules) and some memory (smaller stack and smaller program code).</p>
<h3>Bulk initialization of global variables</h3>
<p>In a <code>.PRG</code> file, the BSS segment is only defined by its size in the header. The purpose of this segment is to store global and static variables without an initial value in the source code. It is filled with $00 bytes by the initialization routine before <code>main()</code> is executed. The DATA segment is stored near the end of the file after the CODE segment and before the relocation data.<br/>
The Megamax C compiler stores only strings in the DATA segment. Other global and static variables that have an initial value are allocated in the BSS segment. Because of this, the compiler generates code to initialize these variables in a code segment named <code>init!</code>. This code is also called by the initialization routine before <code>main()</code> is executed. The size of the code in <code>init!</code> is much larger than the variables it initializes. Because the game contains many global and static variables that should have initial values, FTL decided to minimize the size of the <code>init!</code> segment by declaring many variables without their initial values in the source code and rather store the actual data in 5 graphics #558 to #562 in <code>GRAPHICS.DAT</code> (their total size is around 12KB). Early when the game starts, each of these graphic is loaded in memory as a block which immediately initializes lots of variables at once while using very few code. This helps to minimize the size of the <code>.PRG</code> executable file and its memory footprint.<br/>
The Atari ST versions are the only ones to use such a trick. In all other versions, there are no global and static variable values in <code>GRAPHICS.DAT</code> (Note that in Dungeon Master for Amiga 2.0 English the graphics #558 to #562 are also present in <code>GRAPHICS.DAT</code> but they are not used and the actual data is in the executable file itself).</p>
<h3>Executable file compression</h3>
<p>In order to save disk space, the <code>.PRG</code> executable file is compressed on the floppy disk in a file named <code>START.PAK</code> (33% smaller than the original executable file). When <code>START.PRG</code> is executed, it loads <code>START.PAK</code>, decompresses it in memory and then runs it.</p>
<h3>Graphics compression and caching</h3>
<p>In order to save both disk space and memory, most of the content in <code>GRAPHICS.DAT</code> is compressed using two algorithms:</p>
<ul><li>All the bitmaps are encoded in a way that is fast to decompress. The main purpose of this compression is to save memory as most bitmaps are stored in this compressed form in memory.</li>
<li>Many graphics (bitmaps, sounds, font, text) are compressed with the LZW algorithm. The purpose of this compression is only to minimize the file size on the floppy disk because when the game loads an LZW compressed graphic it is immediately decompressed in memory. The LZW decompression is quite slow and is responsible for the long loading time of the game.</li></ul>
<p>In order to avoid decompressing the same bitmap multiple times while drawing the dungeon view, the game manages a dynamic cache where it stores the most used bitmaps in decompressed form. Each time a bitmap is required, the game checks if it is already available in the cache. If not then it is decompressed and added to the cache for later use. The cache size is only limited by the available memory after all graphics (bitmaps and sounds) have been loaded.<br/>
Storing bitmaps in compressed form in memory and using this cache provides a good compromise between memory footprint and performance.</p>
<h2>Reverse engineering process</h2>
<p>This section briefly describes the overall process I have used to 'decompile' the original executable files back to source code.</p>
<p>For each of the 9 versions:</p>
<ol><li>Decompress the executable file from <code>START.PAK</code>.</li>
<li>Disassemble with TTDigger (running in an Atari ST emulator).</li>
<li>Load the disassembly in an Excel spreadsheet. For each line of assembly code, I have the original bytes and the offset.</li>
<li>Study of the assembly code.
<ul><li>Cleanup of some useless <code>EQU</code> instructions that TTDigger adds sometimes without any valid reason.</li>
<li>Find and comment all system calls that use <code>TRAP</code> instructions.</li>
<li>Analysis of the initialization routine (automatically added by the linker).</li>
<li>Find all sections in the code: delimit each function and routine, correctly identify code and data (some data in the code segment was disassembled by TTDigger as regular instructions).</li>
<li>Find all global variables (offsets to A4 register), local variables and parameters (offsets to A6 register) and all function calls. Inter-segment function calls are performed via the jump table using offsets to A5.</li>
<li>Give names to each function, parameter and variable. Establish offset correspondances between game versions.</li></ul></li>
<li>Study of Megamax C compiler 1.1 with simple test programs (FTL mentioned that they used the Megamax compiler in an interview). Compare the source code statements with the generated machine code to learn what code corresponds to each statement.</li>
<li>For each function in the game, write C source code, compile and disassemble the compiled code (with Megamax in Atari ST emulator) then compare (manually and visually) with the original disassembly. Repeat until the C source produces machine code identical to the original (or nearly identical, see <a href="#Accuracy">Accuracy</a>).</li></ol>
<h2>History</h2>
<h3>Release 1 (2014-01-18)</h3>
<p><strong>First release</strong></p>
<h3>Release 2 (2014-08-05)</h3>
<p><strong>BugsAndChanges.htm</strong>: Updated descriptions for BUG0_22 and CHANGE7_19, 14 additional bugs described in BUG0_63 to BUG0_76<br/>
<strong>Engine.htm</strong>: Added a 'Balance issues' section, Updated the 'Limits' section<br/>
<strong>Readme.htm</strong>: Added 'History' section, added Steem SSE as supported emulator for compilation of ReDMCSB<br/>
<strong>DEFS.H</strong>: Updated the CHAMPION structure with information from other platforms<br/>
<strong>*.C</strong>: A few more comments here and there in the source code</p>
<h2>Credits</h2>
<p>Thanks to the following people who helped me with ReDMCSB:</p>
<dl><dt>Paul R. Stevens</dt>
<dd>The CSBwin source code helped me to find my way in the machine code at the beginning of the project.</dd>
<dt>Meynaf</dt>
<dd>Meynaf discovered many of the bugs listed in <a href="BugsAndChanges.htm">Bugs And Changes</a>, including all those added in release 2.</dd></dl>
</body>
</html>